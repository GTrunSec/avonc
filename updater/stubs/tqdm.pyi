from typing import IO, TextIO, TypeVar, Optional, Union, Dict, Any, Iterable, \
                   Iterator, Generic

T = TypeVar('T')


class tqdm(Generic[T]):
    @classmethod
    def write(cls, s: str,
              file: Optional[IO] = ...,
              end: str = ...,
              nolock: bool = ...) -> None: ...

    def __init__(self,
                 iterable: Optional[Iterable[T]] = ...,
                 desc: Optional[str] = ...,
                 total: Optional[int] = ...,
                 leave: bool = ...,
                 file: Optional[Union[TextIO]] = ...,
                 ncols: Optional[int] = ...,
                 mininterval: float = ...,
                 maxinterval: float = ...,
                 miniters: Optional[int] = ...,
                 ascii: Optional[Union[str, bool]] = ...,
                 disable: bool = ...,
                 unit: str = ...,
                 unit_scale: Union[bool, int, float] = ...,
                 dynamic_ncols: bool = ...,
                 smoothing: float = ...,
                 bar_format: Optional[str] = ...,
                 initial: int = ...,
                 position: Optional[int] = ...,
                 postfix: Optional[Dict[str, Any]] = ...,
                 unit_divisor: float = ...,
                 write_bytes: Optional[bool] = ...): ...

    def __bool__(self) -> bool: ...
    def __nonzero__(self) -> bool: ...
    def __len__(self) -> Optional[int]: ...
    def __enter__(self) -> 'tqdm': ...
    def __exit__(self, *exc) -> bool: ...
    def __del__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Iterator[T]: ...
    def update(self, n: int = ...) -> None: ...
    def close(self) -> None: ...
    def clear(self, nolock: bool = ...) -> None: ...
    def refresh(self, nolock: bool = ...) -> None: ...
    def unpause(self) -> None: ...
    def reset(self, total: Optional[int] = ...) -> None: ...

    def set_description(self, desc: Optional[str] = ...,
                        refresh: bool = ...) -> None: ...

    def set_description_str(self, desc: Optional[str] = ...,
                            refresh: bool = ...) -> None: ...

    def set_postfix(self, ordered_dict: Union[Dict[str, Any]] = ...,
                    refresh: bool = ...) -> None: ...

    def set_postfix_str(self, s: str = ..., refresh: bool = ...) -> None: ...
    def moveto(self, n: int): ...

    @property
    def format_dict(self) -> Dict[str, Any]: ...

    def display(self, msg: Optional[str] = ...,
                pos: Optional[int] = ...) -> None: ...
