commit 268ba7bea1462901b28528d2a5899dc348a5f384
Author: aszlig <aszlig@nix.build>
Date:   Thu Sep 19 00:30:08 2019 +0200

    proxy: Allow use of Unix domain sockets for OSRM
    
    This essentially sets CURLOPT_UNIX_SOCKET_PATH for a few specific API
    requests that go to OSRM and uses a placeholder string that is later
    being replaced by Nix with a PHP array that maps profiles to the
    corresponding Unix domain socket paths where the OSRM backend process is
    running.
    
    Those Unix sockets are only used as soon as the profile URLs are set to
    the special value "internal" so that we have a way to change this at
    runtime (at least for now).
    
    Signed-off-by: aszlig <aszlig@nix.build>

diff --git a/lib/Controller/RoutingProxyController.php b/lib/Controller/RoutingProxyController.php
index 4fbd026..98b9ac3 100644
--- a/lib/Controller/RoutingProxyController.php
+++ b/lib/Controller/RoutingProxyController.php
@@ -21,6 +21,8 @@ use OCP\AppFramework\Http\Response;
 use OCA\Maps\Http\ProxyResponse;
 
 class RoutingProxyController extends Controller {
+    const UNIX_SOCKET_MAP = @unixSocketMap@;
+
     private $logger;
     private $config;
 
@@ -80,7 +82,8 @@ class RoutingProxyController extends Controller {
      * remote server.
      */
     private function proxyResponse(string $baseUrl, string $path,
-                                   array $extraQuery = []): Response {
+                                   array $extraQuery = [],
+                                   string $sockPath = null): Response {
         if ($baseUrl === '') {
             $response = new Response();
             $response->setStatus(Http::STATUS_NOT_ACCEPTABLE);
@@ -89,7 +92,7 @@ class RoutingProxyController extends Controller {
         $url = $baseUrl . '/' . ltrim($path, '/');
         $url .= $this->buildQueryStringArg($extraQuery);
         $proxy = new ProxyResponse($url);
-        $proxy->sendRequest($this->logger);
+        $proxy->sendRequest($this->logger, $sockPath);
         return $proxy;
     }
 
@@ -117,7 +120,20 @@ class RoutingProxyController extends Controller {
             $response->setStatus(Http::STATUS_BAD_REQUEST);
             return $response;
         }
-        return $this->proxyResponse($url, $path);
+
+        if (
+            $url === 'internal' &&
+            array_key_exists($profile, self::UNIX_SOCKET_MAP)
+        ) {
+            return $this->proxyResponse(
+                'http://localhost/route/v1/'.$profile,
+                $path,
+                [],
+                self::UNIX_SOCKET_MAP[$profile]
+            );
+        } else {
+            return $this->proxyResponse($url, $path);
+        }
     }
 
     /**
diff --git a/lib/Http/ProxyResponse.php b/lib/Http/ProxyResponse.php
index 635af8f..4f6b60e 100644
--- a/lib/Http/ProxyResponse.php
+++ b/lib/Http/ProxyResponse.php
@@ -33,7 +33,8 @@ class ProxyResponse extends Response {
      * Send the API request to the given URL and set headers for our response
      * appropriately.
      */
-    public function sendRequest(ILogger $logger): bool {
+    public function sendRequest(ILogger $logger,
+                                string $sockPath = null): bool {
         if (($curl = curl_init()) === false) {
             $logger->error('Unable to initialise cURL');
             $this->setStatus(Http::STATUS_INTERNAL_SERVER_ERROR);
@@ -44,6 +45,9 @@ class ProxyResponse extends Response {
         curl_setopt($curl, CURLOPT_URL, $this->url);
         curl_setopt($curl, CURLOPT_USERAGENT, self::USER_AGENT);
         curl_setopt($curl, CURLOPT_TIMEOUT, self::REQUEST_TIMEOUT);
+        if ($sockPath !== null) {
+            curl_setopt($curl, CURLOPT_UNIX_SOCKET_PATH, $sockPath);
+        }
 
         curl_setopt($curl, CURLOPT_HEADERFUNCTION, function ($_, string $hl) {
             $keyval = explode(':', $hl, 2);
